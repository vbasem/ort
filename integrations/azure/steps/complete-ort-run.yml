# Copyright (C) 2020-2021 Bosch.IO GmbH
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# SPDX-License-Identifier: Apache-2.0
# License-Filename: LICENSE

# This file contains a complete ort run: analyze - scan - evaluate - report

parameters:
  projectVcsUrl: ''
  projectVcsRevision: 'master'
  useCredentials: 'false'
  projectCredentialTemplate: ''

  ortProjectVcsUrl: 'none'
  ortProjectVcsRevision: 'master'
  ortUseCredentials: 'false'
  ortConfigCredentialTemplate: ''

  logLevel: 'default'
  stacktrace: 'false'
  allowDynamicVersions: 'false'
  useClearlyDefined: 'true'

steps:
  - script: |
      if [[ "${{parameters.stacktrace}}" == "True" ]]; then
        echo '##vso[task.setvariable variable=stacktrace]--stacktrace'
      else
        echo '##vso[task.setvariable variable=stacktrace]'
      fi
      if [[ "${{parameters.allowDynamicVersions}}" == "True" ]]; then
        echo '##vso[task.setvariable variable=allowdynamic]--allow-dynamic-versions'
      else
        echo '##vso[task.setvariable variable=allowdynamic]'
      fi
      if [[ "${{parameters.useClearlyDefined}}" == "True" ]]; then
        echo '##vso[task.setvariable variable=useclearlydefined]--clearly-defined-curations'
      else
        echo '##vso[task.setvariable variable=useclearlydefined]'
      fi
      if [[ "${{parameters.logLevel}}" == "default" ]]; then
        echo '##vso[task.setvariable variable=logLevel]'
      else
        echo '##vso[task.setvariable variable=logLevel]--${{parameters.logLevel}}'
      fi
    displayName: "Convert pipeline variables to CLI options"
  - bash: |
      mkdir $(System.DefaultWorkingDirectory)/project && \
      mkdir $(System.DefaultWorkingDirectory)/output && \
      mkdir $(System.DefaultWorkingDirectory)/.ort && \
      mkdir $(System.DefaultWorkingDirectory)/netrc
    displayName: "Create shared directories"
  - template: ${{parameters.ortConfigCredentialTemplate}}
    parameters:
      useCredentials: ${{parameters.ortUseCredentials}}
  - template: ../docker/docker-ort-run.yml
    parameters:
      displayName: "Download ORT configuration"
      command: download --project-url ${{parameters.ortProjectVcsUrl}} --vcs-revision ${{parameters.ortProjectVcsRevision}} -o /root/.ort/config
      condition: and(succeeded(), ne('${{parameters.ortProjectVcsUrl}}', 'none'))
  - template: ${{parameters.projectCredentialTemplate}}
    parameters:
      useCredentials: ${{parameters.useCredentials}}
  - template: ../docker/docker-ort-run.yml
    parameters:
      displayName: "Download project"
      command: download --project-url ${{parameters.projectVcsUrl}} --vcs-revision ${{parameters.projectVcsRevision}} --output-dir /project
  - template: ../docker/docker-ort-run.yml
    parameters:
      displayName: "Analyze project"
      command: analyze -i /project -o /output/results/analyzer $(allowdynamic)
  - template: ../docker/docker-ort-run.yml
    parameters:
      displayName: "Scan project and dependencies"
      command: scan -i /output/results/analyzer/analyzer-result.yml -o /output/results/scanner
  - template: ../docker/docker-ort-run.yml
    parameters:
      displayName: "Evaluate results"
      command: evaluate -i /output/results/scanner/scan-result.yml -o /output/results/evaluator
  - template: ../docker/docker-ort-run.yml
    parameters:
      displayName: "Create reports"
      command: report -f CycloneDX,NoticeTemplate,SpdxDocument,StaticHTML,WebApp -O NoticeTemplate=template.id=default,summary -i /output/results/evaluator/evaluation-result.yml -o /output/results/report
  - task: PublishPipelineArtifact@1
    inputs:
      artifactName: "reports"
      targetPath: $(System.DefaultWorkingDirectory)/output/results
      name: $(Build.BuildNumber)_reports
